{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "wYtuKeK0dImp"
   },
   "outputs": [],
   "source": [
    "# ATTENTION: Please do not alter any of the provided code in the exercise. Only add your own code where indicated\n",
    "# ATTENTION: Please do not add or remove any cells in the exercise. The grader will check specific cells based on the cell position.\n",
    "# ATTENTION: Please use the provided epoch values when training.\n",
    "\n",
    "import csv\n",
    "import numpy as np\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
    "from os import getcwd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "4kxw-_rmcnVu"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(27455, 28, 28)\n",
      "(27455,)\n",
      "(7172, 28, 28)\n",
      "(7172,)\n"
     ]
    }
   ],
   "source": [
    "def get_data(filename):\n",
    "  # You will need to write code that will read the file passed\n",
    "  # into this function. The first line contains the column headers\n",
    "  # so you should ignore it\n",
    "  # Each successive line contians 785 comma separated values between 0 and 255\n",
    "  # The first value is the label\n",
    "  # The rest are the pixel values for that picture\n",
    "  # The function will return 2 np.array types. One with all the labels\n",
    "  # One with all the images\n",
    "  #\n",
    "  # Tips: \n",
    "  # If you read a full line (as 'row') then row[0] has the label\n",
    "  # and row[1:785] has the 784 pixel values\n",
    "  # Take a look at np.array_split to turn the 784 pixels into 28x28\n",
    "  # You are reading in strings, but need the values to be floats\n",
    "  # Check out np.array().astype for a conversion\n",
    "    with open(filename) as training_file:\n",
    "        all_lines = training_file.readlines()[1:] #remove header\n",
    "        length = len(all_lines)\n",
    "        labels = np.zeros(length)\n",
    "        images = np.zeros((length, 28, 28))\n",
    "        for idx, line in enumerate(all_lines):\n",
    "            line = line.strip().split(',')\n",
    "            if not line:\n",
    "                continue\n",
    "            #add the label\n",
    "            labels[idx] = int(line[0])\n",
    "            #add the image\n",
    "            image = np.asarray(line[1:], dtype=np.float32)\n",
    "            image = np.array_split(image, 28)\n",
    "            images[idx, :, :] = image\n",
    "    return images, labels\n",
    "\n",
    "path_sign_mnist_train = f\"{getcwd()}/../tmp2/sign_mnist_train.csv\"\n",
    "path_sign_mnist_test = f\"{getcwd()}/../tmp2/sign_mnist_test.csv\"\n",
    "training_images, training_labels = get_data(path_sign_mnist_train)\n",
    "testing_images, testing_labels = get_data(path_sign_mnist_test)\n",
    "\n",
    "# Keep these\n",
    "print(training_images.shape)\n",
    "print(training_labels.shape)\n",
    "print(testing_images.shape)\n",
    "print(testing_labels.shape)\n",
    "\n",
    "# Their output should be:\n",
    "# (27455, 28, 28)\n",
    "# (27455,)\n",
    "# (7172, 28, 28)\n",
    "# (7172,)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "awoqRpyZdQkD"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(27455, 28, 28, 1)\n",
      "(7172, 28, 28, 1)\n"
     ]
    }
   ],
   "source": [
    "# In this section you will have to add another dimension to the data\n",
    "# So, for example, if your array is (10000, 28, 28)\n",
    "# You will need to make it (10000, 28, 28, 1)\n",
    "# Hint: np.expand_dims\n",
    "\n",
    "training_images = np.expand_dims(training_images, axis=3)\n",
    "testing_images = np.expand_dims(testing_images, axis=3)\n",
    "\n",
    "\n",
    "# Create an ImageDataGenerator and do Image Augmentation\n",
    "train_datagen = ImageDataGenerator(\n",
    "    rescale=1./255,\n",
    "    rotation_range=40,\n",
    "    width_shift_range=0.2,\n",
    "    height_shift_range=0.2,\n",
    "    shear_range=0.2,\n",
    "    zoom_range=0.2,\n",
    "    fill_mode='nearest',\n",
    "    horizontal_flip=True\n",
    "    )\n",
    "\n",
    "validation_datagen = ImageDataGenerator(\n",
    "    rescale = 1./255)\n",
    "\n",
    "# Keep These\n",
    "print(training_images.shape)\n",
    "print(testing_images.shape)\n",
    "    \n",
    "# Their output should be:\n",
    "# (27455, 28, 28, 1)\n",
    "# (7172, 28, 28, 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "Rmb7S32cgRqS"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/2\n",
      "858/858 [==============================] - 56s 65ms/step - loss: 2.6991 - acc: 0.1730 - val_loss: 1.7316 - val_acc: 0.4813\n",
      "Epoch 2/2\n",
      "858/858 [==============================] - 58s 68ms/step - loss: 2.0041 - acc: 0.3584 - val_loss: 1.2779 - val_acc: 0.5846\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[114.40591320031459, 0.51673174]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Define the model\n",
    "# Use no more than 2 Conv2D and 2 MaxPooling2D\n",
    "model = tf.keras.models.Sequential([\n",
    "\n",
    "tf.keras.layers.Conv2D(64, (3, 3), activation='relu', input_shape=(28, 28, 1)),\n",
    "tf.keras.layers.MaxPooling2D(2, 2),\n",
    "tf.keras.layers.Conv2D(128, (3, 3), activation='relu'),\n",
    "tf.keras.layers.MaxPooling2D(2, 2),\n",
    "tf.keras.layers.Flatten(),\n",
    "tf.keras.layers.Dropout(0.5),\n",
    "tf.keras.layers.Dense(512, activation='relu'),\n",
    "tf.keras.layers.Dense(25, activation='softmax')])\n",
    "\n",
    "train_generator = train_datagen.flow(training_images, training_labels)\n",
    "validation_generator = validation_datagen.flow(testing_images, testing_labels)\n",
    "# Compile Model. \n",
    "model.compile(optimizer= 'adam',\n",
    "             loss = 'sparse_categorical_crossentropy',\n",
    "             metrics=['acc'])\n",
    "\n",
    "# Train the Model\n",
    "history = model.fit_generator(train_generator,\n",
    "                              epochs=2,\n",
    "                              verbose=1,\n",
    "                              validation_data=validation_generator)\n",
    "\n",
    "model.evaluate(testing_images, testing_labels, verbose=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "_Q3Zpr46dsij"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXQAAAEICAYAAABPgw/pAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjEsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy8QZhcZAAAgAElEQVR4nO3deXxV1bn/8c8DBBDCJIMKgsEBIcwhIFZQEEVABIPUYp0nWn8dtFZf8kNbvV691/ZatNY6taXWW0X9IRGctYoiTkwVEBFBRA0zKMgMgef3xzrhJCHDCTnJyTn5vl+v8+Lk7HX2fnZOeLKy9trrMXdHRESSX51EByAiIvGhhC4ikiKU0EVEUoQSuohIilBCFxFJEUroIiIpQgldSmRmdc1su5l1iGfbRDKzE80s7vN0zewsM1tV6OtlZjYwlraHcay/mtnEw31/Gfu9y8wej/d+pXrVS3QAEh9mtr3Ql42APcD+yNc/cfcnK7I/d98PpMe7bW3g7ifHYz9mdg1wibsPKrTva+Kxb0lNSugpwt0PJtRID/Aad/9Xae3NrJ6751dHbCJSPTTkUktE/qR+xsymmNk24BIzO9XMPjSzLWa21sweMLO0SPt6ZuZmlhH5+p+R7a+Y2TYz+8DMOla0bWT7cDP73My2mtmfzOw9M7uilLhjifEnZrbCzL4zswcKvbeumd1nZpvNbCUwrIzvz61m9nSx1/5sZpMiz68xs6WR8/ki0nsubV95ZjYo8ryRmf1vJLYlQJ9ibW8zs5WR/S4xs1GR17sDDwIDI8NZmwp9b+8o9P6fRs59s5k9b2bHxPK9KY+Z5UTi2WJmb5nZyYW2TTSzNWb2vZl9Vuhc+5vZgsjr683sf2I9nsSJu+uRYg9gFXBWsdfuAvYC5xF+kR8B9AVOIfyldjzwOfDzSPt6gAMZka//CWwCsoE04Bngn4fRtg2wDRgd2XYjsA+4opRziSXG6UAzIAP4tuDcgZ8DS4BjgZbArPAjX+Jxjge2A40L7XsDkB35+rxIGwPOBHYBPSLbzgJWFdpXHjAo8vxe4G2gBXAc8GmxthcCx0Q+kx9HYjgqsu0a4O1icf4TuCPyfGgkxl5AQ+Ah4K1YvjclnP9dwOOR510icZwZ+YwmAssiz7sCXwFHR9p2BI6PPJ8LXBR53gQ4JdH/F2rbQz302mW2u7/g7gfcfZe7z3X3j9w9391XAo8BZ5Tx/qnuPs/d9wFPEhJJRduOBD529+mRbfcRkn+JYozxv919q7uvIiTPgmNdCNzn7nnuvhm4p4zjrAQ+IfyiATgb+M7d50W2v+DuKz14C3gTKPHCZzEXAne5+3fu/hWh1134uM+6+9rIZ/IU4Zdxdgz7BbgY+Ku7f+zuu4EJwBlmdmyhNqV9b8oyDpjh7m9FPqN7CL8UTgHyCb88ukaG7b6MfO8g/GI+ycxauvs2d/8oxvOQOFFCr12+KfyFmXU2s5fMbJ2ZfQ/cCbQq4/3rCj3fSdkXQktr27ZwHO7uhB5tiWKMMaZjEXqWZXkKuCjy/MeRrwviGGlmH5nZt2a2hdA7Lut7VeCYsmIwsyvMbGFkaGML0DnG/UI4v4P7c/fvge+AdoXaVOQzK22/BwifUTt3Xwb8mvA5bIgM4R0daXolkAksM7M5ZjYixvOQOFFCr12KT9l7lNArPdHdmwK/JQwpVKW1hCEQAMzMKJqAiqtMjGuB9oW+Lm9a5bPAWWbWjtBTfyoS4xHAVOC/CcMhzYHXY4xjXWkxmNnxwMPAdUDLyH4/K7Tf8qZYriEM4xTsrwlhaGd1DHFVZL91CJ/ZagB3/6e7n0YYbqlL+L7g7svcfRxhWO0PwHNm1rCSsUgFKKHXbk2ArcAOM+sC/KQajvkikGVm55lZPeB6oHUVxfgscIOZtTOzlsAtZTV293XAbOBxYJm7L49sagDUBzYC+81sJDCkAjFMNLPmFubp/7zQtnRC0t5I+N12LaGHXmA9cGzBReASTAGuNrMeZtaAkFjfdfdS/+KpQMyjzGxQ5Ng3E657fGRmXcxscOR4uyKPA4QTuNTMWkV69Fsj53agkrFIBSih126/Bi4n/Gd9lHDxskq5+3rgR8AkYDNwAvBvwrz5eMf4MGGsezHhgt3UGN7zFOEi58HhFnffAvwKyCVcWBxL+MUUi9sJfymsAl4Bnii030XAn4A5kTYnA4XHnd8AlgPrzazw0EnB+18lDH3kRt7fgTCuXinuvoTwPX+Y8MtmGDAqMp7eAPg94brHOsJfBLdG3joCWGphFtW9wI/cfW9l45HYWRjCFEkMM6tL+BN/rLu/m+h4RJKZeuhS7cxsWGQIogHwG8LsiDkJDksk6SmhSyIMAFYS/pw/B8hx99KGXEQkRhpyERFJEeqhi4ikiIQtztWqVSvPyMhI1OFFRJLS/PnzN7l7iVN9E5bQMzIymDdvXqIOLyKSlMys1DueNeQiIpIilNBFRFKEErqISIpQxSKRFLdv3z7y8vLYvXt3okORCmjYsCHHHnssaWmlLeVzKCV0kRSXl5dHkyZNyMjIICxuKTWdu7N582by8vLo2LFj+W+I0JCLSIrbvXs3LVu2VDJPImZGy5YtK/xXlRK6SC2gZJ58DuczS76E/uWXcOutMG8eaNkCEZGDki+hf/QR/O530LcvHHccXH89vP025OcnOjIRKWbz5s306tWLXr16cfTRR9OuXbuDX+/dG9tS6VdeeSXLli0rs82f//xnnnzyyXiEzIABA/j444/jsq/qlnwXRceNg7PPhhdfhGnT4LHH4IEHoGVLGD0acnLgrLOgoSpfiSRay5YtDybHO+64g/T0dG666aYibQ5WrK9Tcv/y73//e7nH+dnPflb5YFNA8vXQISTvyy+H6dNh40aYOhXOOSf8e9550Lo1/OhH8PTT8P33iY5WRIpZsWIFmZmZXHzxxXTt2pW1a9cyfvx4srOz6dq1K3feeefBtgU95vz8fJo3b86ECRPo2bMnp556Khs2bADgtttu4/777z/YfsKECfTr14+TTz6Z999/H4AdO3ZwwQUXkJmZydixY8nOzo65J75r1y4uv/xyunfvTlZWFrNmzQJg8eLF9O3bl169etGjRw9WrlzJtm3bGD58OD179qRbt25MnRpLoaz4SL4eenHp6XDBBeGxdy/MnBl67tOnw7PPQv36MGQIjBkDo0ZBmzaJjlgkcW64AeI9nNCrF0SSaUV89tlnPPHEE2RnZwNwzz33cOSRR5Kfn8/gwYMZO3YsmZmZRd6zdetWzjjjDO655x5uvPFGJk+ezIQJEw7Zt7szZ84cZsyYwZ133smrr77Kn/70J44++miee+45Fi5cSFZWVsyxPvDAAzRo0IDFixezZMkSRowYwfLly3nooYe46aab+NGPfsSePXtwd6ZPn05GRgavvPLKwZirS3L20EtTv37oqT/6KKxeDbNnw89/Dp99BtdeC8ccA6efHn74vip1fRsRqQYnnHDCwWQOMGXKFLKyssjKymLp0qV8+umnh7zniCOOYPjw4QD06dOHVatWlbjvMWPGHNJm9uzZjBs3DoCePXvStWvXmGOdPXs2l1xyCQBdu3albdu2rFixgh/84Afcdddd/P73v+ebb76hYcOG9OjRg1dffZUJEybw3nvv0axZs5iPU1nJ30MvTd26cNpp4XHvvbBoEeTmht77r34VHr17h557Tg5kZoKmdkmqO4yedFVp3LjxwefLly/nj3/8I3PmzKF58+ZccsklJc7Brl+//sHndevWJb+UyRANGjQot008XHrppZx66qm89NJLDBs2jMmTJ3P66aczb948Xn75ZSZMmMDw4cOZOHFilcVQWGr10EtjBj17wh13hMS+fDn8z/+EC6e/+Q106wYnnwwTJoRZNAcOJDpikVrl+++/p0mTJjRt2pS1a9fy2muvxf0Yp512Gs8++ywQxr5L+gugNAMHDjw4i2bp0qWsXbuWE088kZUrV3LiiSdy/fXXM3LkSBYtWsTq1atJT0/n0ksv5de//jULFiyI+7mUJnV76GU58US46abwWLs2jLdPmwZ/+EOYEtm2LZx/fui9n346VGAtBRGpuKysLDIzM+ncuTPHHXccp512WtyP8Ytf/ILLLruMzMzMg4/ShkPOOeecg2uoDBw4kMmTJ/OTn/yE7t27k5aWxhNPPEH9+vV56qmnmDJlCmlpabRt25Y77riD999/nwkTJlCnTh3q16/PI488EvdzKU3CaopmZ2d7jStw8d138NJLIbm/+irs2gUtWoSZM2PGwNChcMQRiY5SpEKWLl1Kly5dEh1GwuXn55Ofn0/Dhg1Zvnw5Q4cOZfny5dSrV3P7tSV9dmY2392zS2pfc88kEVq0gEsuCY+dO+H110NynzEDnngCGjWCYcNCcj/3XGjePNERi0iMtm/fzpAhQ8jPz8fdefTRR2t0Mj8cqXU28dSoURh2Of982LcP3nknXFQtuLBarx6ceWZI7qNHw9FHJzpiESlD8+bNmT9/fqLDqFLlXhQ1s/ZmNtPMPjWzJWZ2fSntBpnZx5E278Q/1ARKSwt3n/75z5CXBx98ADfeCCtXwk9/GsbcC2bTfPFFoqMVkVoqllku+cCv3T0T6A/8zMyKzPY3s+bAQ8Aod+8K/DDukdYUdepA//7h4unnn8PixfAf/xGGaG6+OVxwLZhRs3ChFhATkWpTbkJ397XuviDyfBuwFGhXrNmPgWnu/nWk3YZ4B1ojmYUpj7/5Dfz736HHPmkSNG0Kd94Z7qArmFHz3nuaDikiVapC89DNLAPoDXxUbFMnoIWZvW1m883sslLeP97M5pnZvI0bNx5OvDVbx47hhqV33w3TIR97LMxvf+ABGDAA2rULQzSvvRaWKRARiaOYE7qZpQPPATe4e/EVr+oBfYBzgXOA35hZp+L7cPfH3D3b3bNbt25dibCTwFFHheUGXn45LCD21FMwcCD8859hpkybNmE2zXPPwY4diY5WpEoMHjz4kJuE7r//fq677roy35eeng7AmjVrGDt2bIltBg0aRHlTn++//3527tx58OsRI0awZcuWWEIv0x133MG9995b6f3EW0wJ3czSCMn8SXefVkKTPOA1d9/h7puAWUDP+IWZ5Jo1g4suCouFbdwYpkGOGQOvvAJjx0KrVmE2zT/+Ad9+m+hoReLmoosu4umnny7y2tNPP81FF10U0/vbtm1bqdUKiyf0l19+meYpPN04llkuBvwNWOruk0ppNh0YYGb1zKwRcAphrF2KO+KIcKPS5Mmwfj289Vboyc+fD1dcEXruBTNqVq9OdLQilTJ27Fheeumlg8UsVq1axZo1axg4cODBeeFZWVl0796d6dOnH/L+VatW0a1bNyAsYTtu3Di6dOlCTk4Ou3btOtjuuuuuO7j07u233w6EFRLXrFnD4MGDGTx4MAAZGRls2rQJgEmTJtGtWze6det2cOndVatW0aVLF6699lq6du3K0KFDixynPCXtc8eOHZx77rkHl9N95plnAJgwYQKZmZn06NHjkDXiD1cs89BPAy4FFptZwbqbE4EOAO7+iLsvNbNXgUXAAeCv7v5JXCJMZfXqweDB4fHHP4ayegXz3H/+8/A45ZSweFhODnQ6ZBRLpEKqe/XcI488kn79+vHKK68wevRonn76aS688ELMjIYNG5Kbm0vTpk3ZtGkT/fv3Z9SoUaXW0nz44Ydp1KgRS5cuZdGiRUWWv7377rs58sgj2b9/P0OGDGHRokX88pe/ZNKkScycOZNWrVoV2df8+fP5+9//zkcffYS7c8opp3DGGWfQokULli9fzpQpU/jLX/7ChRdeyHPPPXdwpcWylLbPlStX0rZtW1566SUgLKe7efNmcnNz+eyzzzCzuAwDQWyzXGa7u7l7D3fvFXm8HEnkjxRq9z/ununu3dy95izplizMQlm9//qvsNzvp5/C3XfD/v1h0bCTT47OqFmwQNMhJWkUHnYpPNzi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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the chart for accuracy and loss on both training and validation\n",
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "acc = history.history['acc']\n",
    "val_acc = history.history['val_acc']\n",
    "loss = history.history['loss']\n",
    "val_loss = history.history['val_loss']\n",
    "\n",
    "epochs = range(len(acc))\n",
    "\n",
    "plt.plot(epochs, acc, 'r', label='Training accuracy')\n",
    "plt.plot(epochs, val_acc, 'b', label='Validation accuracy')\n",
    "plt.title('Training and validation accuracy')\n",
    "plt.legend()\n",
    "plt.figure()\n",
    "\n",
    "plt.plot(epochs, loss, 'r', label='Training Loss')\n",
    "plt.plot(epochs, val_loss, 'b', label='Validation Loss')\n",
    "plt.title('Training and validation loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Submission Instructions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Now click the 'Submit Assignment' button above."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# When you're done or would like to take a break, please run the two cells below to save your work and close the Notebook. This will free up resources for your fellow learners. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%%javascript\n",
    "<!-- Save the notebook -->\n",
    "IPython.notebook.save_checkpoint();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%%javascript\n",
    "IPython.notebook.session.delete();\n",
    "window.onbeforeunload = null\n",
    "setTimeout(function() { window.close(); }, 1000);"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "name": "Exercise 8 - Question.ipynb",
   "provenance": []
  },
  "coursera": {
   "course_slug": "convolutional-neural-networks-tensorflow",
   "graded_item_id": "8mIh8",
   "launcher_item_id": "gg95t"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
