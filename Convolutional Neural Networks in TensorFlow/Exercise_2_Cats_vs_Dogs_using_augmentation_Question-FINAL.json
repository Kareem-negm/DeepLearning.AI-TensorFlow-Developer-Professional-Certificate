{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "dn-6c02VmqiN"
   },
   "outputs": [],
   "source": [
    "# ATTENTION: Please do not alter any of the provided code in the exercise. Only add your own code where indicated\n",
    "# ATTENTION: Please do not add or remove any cells in the exercise. The grader will check specific cells based on the cell position.\n",
    "# ATTENTION: Please use the provided epoch values when training.\n",
    "\n",
    "# In this exercise you will train a CNN on the FULL Cats-v-dogs dataset\n",
    "# This will require you doing a lot of data preprocessing because\n",
    "# the dataset isn't split into training and validation for you\n",
    "# This code block has all the required inputs\n",
    "import os\n",
    "import zipfile\n",
    "import random\n",
    "import shutil\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras.optimizers import RMSprop\n",
    "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
    "from shutil import copyfile\n",
    "from os import getcwd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "3sd9dQWa23aj"
   },
   "outputs": [],
   "source": [
    "# This code block unzips the full Cats-v-Dogs dataset to /tmp\n",
    "# which will create a tmp/PetImages directory containing subdirectories\n",
    "# called 'Cat' and 'Dog' (that's how the original researchers structured it)\n",
    "path_cats_and_dogs = f\"{getcwd()}/../tmp2/cats-and-dogs.zip\"\n",
    "shutil.rmtree('/tmp')\n",
    "\n",
    "local_zip = path_cats_and_dogs\n",
    "zip_ref = zipfile.ZipFile(local_zip, 'r')\n",
    "zip_ref.extractall('/tmp')\n",
    "zip_ref.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "gi3yD62a6X3S"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1500\n",
      "1500\n"
     ]
    }
   ],
   "source": [
    "print(len(os.listdir('/tmp/PetImages/Cat/')))\n",
    "print(len(os.listdir('/tmp/PetImages/Dog/')))\n",
    "\n",
    "# Expected Output:\n",
    "# 1500\n",
    "# 1500"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "F-QkLjxpmyK2"
   },
   "outputs": [],
   "source": [
    "# Use os.mkdir to create your directories\n",
    "# You will need a directory for cats-v-dogs, and subdirectories for training\n",
    "# and testing. These in turn will need subdirectories for 'cats' and 'dogs'\n",
    "try:\n",
    "    os.mkdir('/tmp/cats-v-dogs')\n",
    "    os.mkdir('/tmp/cats-v-dogs/training')\n",
    "    os.mkdir('/tmp/cats-v-dogs/testing')\n",
    "    os.mkdir('/tmp/cats-v-dogs/training/cats')\n",
    "    os.mkdir('/tmp/cats-v-dogs/training/dogs')\n",
    "    os.mkdir('/tmp/cats-v-dogs/testing/cats')\n",
    "    os.mkdir('/tmp/cats-v-dogs/testing/dogs')\n",
    "except OSError:\n",
    "    pass\n",
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "zvSODo0f9LaU"
   },
   "outputs": [],
   "source": [
    "# Write a python function called split_data which takes\n",
    "# a SOURCE directory containing the files\n",
    "# a TRAINING directory that a portion of the files will be copied to\n",
    "# a TESTING directory that a portion of the files will be copie to\n",
    "# a SPLIT SIZE to determine the portion\n",
    "# The files should also be randomized, so that the training set is a random\n",
    "# X% of the files, and the test set is the remaining files\n",
    "# SO, for example, if SOURCE is PetImages/Cat, and SPLIT SIZE is .9\n",
    "# Then 90% of the images in PetImages/Cat will be copied to the TRAINING dir\n",
    "# and 10% of the images will be copied to the TESTING dir\n",
    "# Also -- All images should be checked, and if they have a zero file length,\n",
    "# they will not be copied over\n",
    "#\n",
    "# os.listdir(DIRECTORY) gives you a listing of the contents of that directory\n",
    "# os.path.getsize(PATH) gives you the size of the file\n",
    "# copyfile(source, destination) copies a file from source to destination\n",
    "# random.sample(list, len(list)) shuffles a list\n",
    "def split_data(SOURCE, TRAINING, TESTING, SPLIT_SIZE):\n",
    "\n",
    "    all_files = []\n",
    "    \n",
    "    for file_name in os.listdir(SOURCE):\n",
    "        file_path = SOURCE + file_name\n",
    "\n",
    "        if os.path.getsize(file_path):\n",
    "            all_files.append(file_name)\n",
    "        else:\n",
    "            print('{} is zero length, so ignoring'.format(file_name))\n",
    "    \n",
    "    n_files = len(all_files)\n",
    "    split_point = int(n_files * SPLIT_SIZE)\n",
    "    \n",
    "    shuffled = random.sample(all_files, n_files)\n",
    "    \n",
    "    train_set = shuffled[:split_point]\n",
    "    test_set = shuffled[split_point:]\n",
    "    \n",
    "    for file_name in train_set:\n",
    "        copyfile(SOURCE + file_name, TRAINING + file_name)\n",
    "        \n",
    "    for file_name in test_set:\n",
    "        copyfile(SOURCE + file_name, TESTING + file_name)\n",
    "\n",
    "\n",
    "CAT_SOURCE_DIR = \"/tmp/PetImages/Cat/\"\n",
    "TRAINING_CATS_DIR = \"/tmp/cats-v-dogs/training/cats/\"\n",
    "TESTING_CATS_DIR = \"/tmp/cats-v-dogs/testing/cats/\"\n",
    "DOG_SOURCE_DIR = \"/tmp/PetImages/Dog/\"\n",
    "TRAINING_DOGS_DIR = \"/tmp/cats-v-dogs/training/dogs/\"\n",
    "TESTING_DOGS_DIR = \"/tmp/cats-v-dogs/testing/dogs/\"\n",
    "\n",
    "split_size = .9\n",
    "split_data(CAT_SOURCE_DIR, TRAINING_CATS_DIR, TESTING_CATS_DIR, split_size)\n",
    "split_data(DOG_SOURCE_DIR, TRAINING_DOGS_DIR, TESTING_DOGS_DIR, split_size)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "luthalB76ufC"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1491\n",
      "1490\n",
      "291\n",
      "290\n"
     ]
    }
   ],
   "source": [
    "print(len(os.listdir('/tmp/cats-v-dogs/training/cats/')))\n",
    "print(len(os.listdir('/tmp/cats-v-dogs/training/dogs/')))\n",
    "print(len(os.listdir('/tmp/cats-v-dogs/testing/cats/')))\n",
    "print(len(os.listdir('/tmp/cats-v-dogs/testing/dogs/')))\n",
    "\n",
    "# Expected output:\n",
    "# 1350\n",
    "# 1350\n",
    "# 150\n",
    "# 150"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "-BQrav4anTmj"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_2\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "conv2d (Conv2D)              (None, 148, 148, 16)      448       \n",
      "_________________________________________________________________\n",
      "max_pooling2d (MaxPooling2D) (None, 74, 74, 16)        0         \n",
      "_________________________________________________________________\n",
      "conv2d_1 (Conv2D)            (None, 72, 72, 32)        4640      \n",
      "_________________________________________________________________\n",
      "max_pooling2d_1 (MaxPooling2 (None, 36, 36, 32)        0         \n",
      "_________________________________________________________________\n",
      "conv2d_2 (Conv2D)            (None, 34, 34, 64)        18496     \n",
      "_________________________________________________________________\n",
      "max_pooling2d_2 (MaxPooling2 (None, 17, 17, 64)        0         \n",
      "_________________________________________________________________\n",
      "flatten (Flatten)            (None, 18496)             0         \n",
      "_________________________________________________________________\n",
      "dense (Dense)                (None, 512)               9470464   \n",
      "_________________________________________________________________\n",
      "dense_1 (Dense)              (None, 1)                 513       \n",
      "=================================================================\n",
      "Total params: 9,494,561\n",
      "Trainable params: 9,494,561\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "# DEFINE A KERAS MODEL TO CLASSIFY CATS V DOGS\n",
    "# USE AT LEAST 3 CONVOLUTION LAYERS\n",
    "model = tf.keras.models.Sequential([\n",
    "\n",
    "#additing the 1st convolution layers\n",
    "tf.keras.layers.Conv2D(16,(3,3) ,activation='relu',input_shape=(150,150,3)), \n",
    "tf.keras.layers.MaxPool2D(2,2),   \n",
    "#addition the 2nd convolution layers\n",
    "tf.keras.layers.Conv2D(32,(3,3) , activation='relu'),\n",
    "tf.keras.layers.MaxPool2D(2,2),\n",
    "#addition the 3rd convolution layers\n",
    "tf.keras.layers.Conv2D(64,(3,3),activation='relu'),\n",
    "tf.keras.layers.MaxPool2D(2,2),\n",
    "tf.keras.layers.Flatten(),\n",
    "tf.keras.layers.Dense(512,activation='relu'),\n",
    "tf.keras.layers.Dense(1, activation='sigmoid'),                               \n",
    "# YOUR CODE HERE\n",
    "])\n",
    "\n",
    "\n",
    "model.compile(optimizer=RMSprop(lr=0.001), loss='binary_crossentropy', metrics=['acc'])\n",
    "model.summary()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# NOTE:\n",
    "\n",
    "In the cell below you **MUST** use a batch size of 10 (`batch_size=10`) for the `train_generator` and the `validation_generator`. Using a batch size greater than 10 will exceed memory limits on the Coursera platform."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "mlNjoJ5D61N6"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 2981 images belonging to 2 classes.\n",
      "Found 581 images belonging to 2 classes.\n"
     ]
    }
   ],
   "source": [
    "TRAINING_DIR = '/tmp/cats-v-dogs/training'\n",
    "train_datagen = ImageDataGenerator( rescale = 1.0/255. )#YOUR CODE HERE\n",
    "train_generator = train_datagen.flow_from_directory(TRAINING_DIR,\n",
    "                                                    batch_size=20,\n",
    "                                                    class_mode='binary',\n",
    "                                                    target_size=(150, 150))\n",
    "\n",
    "VALIDATION_DIR = '/tmp/cats-v-dogs/testing'\n",
    "validation_datagen = ImageDataGenerator( rescale = 1.0/255. )#YOUR CODE HERE\n",
    "validation_generator = train_datagen.flow_from_directory(VALIDATION_DIR,\n",
    "                                                    batch_size=20,\n",
    "                                                    class_mode='binary',\n",
    "                                                    target_size=(150, 150))\n",
    "\n",
    "\n",
    "\n",
    "# Expected Output:\n",
    "# Found 2700 images belonging to 2 classes.\n",
    "# Found 300 images belonging to 2 classes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "KyS4n53w7DxC"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/2\n",
      "150/150 [==============================] - 32s 215ms/step - loss: 0.7418 - acc: 0.5810 - val_loss: 0.5512 - val_acc: 0.7539\n",
      "Epoch 2/2\n",
      "150/150 [==============================] - 26s 176ms/step - loss: 0.6065 - acc: 0.6887 - val_loss: 0.4989 - val_acc: 0.8038\n"
     ]
    }
   ],
   "source": [
    "history = model.fit_generator(train_generator,\n",
    "                              epochs=2,\n",
    "                              verbose=1,\n",
    "                              validation_data=validation_generator)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "MWZrJN4-65RC"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Training and validation loss')"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAa8AAAEICAYAAADocntXAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjEsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy8QZhcZAAAZvklEQVR4nO3de5jdVX3v8c8nGXIPieZGwm2IoAQwUJiqbb2AYKVUoZ7yIKht8YgXeqxSrOf4oMfSlueUHlGfo8dSqLVUEJRDS8Fy0cqlgEpwCBBIIIoxlJAEkkBCyP3yPX+s35CdmX2b2bdZM+/X8/ye+e291+/3W2vvTD6z1l57L0eEAADIyZhOVwAAgMEivAAA2SG8AADZIbwAANkhvAAA2SG8AADZIbwASbbH2n7F9mHNLNtJto+03fTPwtg+zfbKktvLbb+tnrJDuNY3bV8y1OOrnPcy29c0+7xon65OVwAYCtuvlNycJGmHpD3F7Y9HxHcGc76I2CNpSrPLjgYR8YZmnMf2BZI+FBEnl5z7gmacGyMP4YUsRcSr4VH8ZX9BRPyoUnnbXRGxux11A9B6DBtiRCqGhb5n+wbbmyV9yPZv2H7Q9kbba2x/zfYBRfku22G7u7h9XfH4HbY32/6p7SMGW7Z4/Hds/9z2Jttft/1j2+dXqHc9dfy47adtv2T7ayXHjrX9VdsbbK+QdHqV5+fztr/b775v2P5KsX+B7SeL9vyy6BVVOtcq2ycX+5NsX1vUbamkk/qV/YLtFcV5l9o+s7j/jZL+r6S3FUOy60ue20tLjv9E0fYNtv/V9tx6nptabL+vqM9G23fbfkPJY5fYXm37ZdtPlbT1LbYXF/c/b/tL9V4PTRARbGxZb5JWSjqt332XSdop6b1Kf6RNlPTrkt6sNOIwX9LPJX2yKN8lKSR1F7evk7ReUo+kAyR9T9J1Qyg7W9JmSWcVj10saZek8yu0pZ463iJpmqRuSS/2tV3SJyUtlXSIpBmS7ku/4mWvM1/SK5Iml5z7BUk9xe33FmUs6Z2StklaWDx2mqSVJedaJenkYv8KSfdKeo2kwyUt61f2HElzi9fkA0Ud5hSPXSDp3n71vE7SpcX+bxd1PEHSBEl/K+nuep6bMu2/TNI1xf6Coh7vLF6jSyQtL/aPlfSMpIOKskdIml/s/0zSecX+VElv7vTvwmja6HlhJHsgIr4fEXsjYltE/CwiFkXE7ohYIelqSe+ocvxNEdEbEbskfUfpP83Bln2PpEcj4pbisa8qBV1ZddbxryNiU0SsVAqKvmudI+mrEbEqIjZIurzKdVZIekIpVCXpXZJeioje4vHvR8SKSO6WdJekspMy+jlH0mUR8VJEPKPUmyq97o0RsaZ4Ta5X+sOjp47zStIHJX0zIh6NiO2SPifpHbYPKSlT6bmp5lxJt0bE3cVrdLlSAL5Z0m6loDy2GHr+VfHcSemPkKNsz4iIzRGxqM52oAkIL4xkz5besH207dtsr7X9sqS/lDSzyvFrS/a3qvokjUpl55XWIyJCqadSVp11rOtaSj2Gaq6XdF6x/4Hidl893mN7ke0XbW9U6vVUe676zK1WB9vn236sGJ7bKOnoOs8rpfa9er6IeFnSS5IOLikzmNes0nn3Kr1GB0fEckmfUXodXiiGoQ8qin5Y0jGSltt+yPYZdbYDTUB4YSTrP038KqXexpERcaCkLyoNi7XSGqVhPEmSbWv//2z7a6SOayQdWnK71lT+GyWdZvtgpR7Y9UUdJ0q6SdJfKw3pTZf0wzrrsbZSHWzPl3SlpAslzSjO+1TJeWtN61+tNBTZd76pSsOTz9VRr8Gcd4zSa/acJEXEdRHxW0pDhmOVnhdFxPKIOFdpaPjLkv7Z9oQG64I6EV4YTaZK2iRpi+0Fkj7ehmv+m6QTbb/XdpekT0ua1aI63ijpItsH254h6X9UKxwRayU9IOkaScsj4hfFQ+MljZO0TtIe2++RdOog6nCJ7elOn4P7ZMljU5QCap1Sjn9UqefV53lJh/RNUCnjBkkfsb3Q9nilELk/Iir2ZAdR5zNtn1xc+7NK71Musr3A9inF9bYV216lBvyB7ZlFT21T0ba9DdYFdSK8MJp8RtIfKf3HdJXSxIqWiojnJb1f0lckbZD0OkmPKH0urdl1vFLpvanHlSYT3FTHMdcrTcB4dcgwIjZK+lNJNytNejhbKYTr8edKPcCVku6Q9O2S8y6R9HVJDxVl3iCp9H2if5f0C0nP2y4d/us7/k6l4bubi+MPU3ofrCERsVTpOb9SKVhPl3Rm8f7XeEn/W+l9yrVKPb3PF4eeIelJp9msV0h6f0TsbLQ+qI/TEDyAdrA9VmmY6uyIuL/T9QFyRc8LaDHbpxfDaOMl/U+lWWoPdbhaQNYIL6D13ipphdKQ1LslvS8iKg0bAqgDw4YAgOzQ8wIAZIcv5m2TmTNnRnd3d6erAQBZefjhh9dHxICPlxBebdLd3a3e3t5OVwMAsmK77DfFMGwIAMgO4QUAyA7hBQDIDuEFAMgO4QUAyE7V8LJ9j+1397vvIttX1jjuleLnPNtlvxzU9r22qy5CV1xrUsnt221Pr3ZMPWxfavvPGj0PAKAzavW8blBaZbTUucX9NUXE6og4eygVK1wk6dXwiogzim+8BgCMYrXC6yZJv2t7nCTZ7lZadfR+21Ns32V7se3HbZ/V/2Db3bafKPYn2v6u7Sdt3yxpYkm5K2332l5q+y+K+z5VXOse2/cU9620PbPYv9j2E8V2Ucn1nrT998W5flgsrFeXCuecXKxs+1hx//uL+y+3vcz2EttX1HsNAEDjqn5IOSJetP2QpN+RdItSr+vGiAjb25W+YPTlIlAetH1rVP6yxAslbY2IBbYXSlpc8tjni2uNlXSX7YUR8TXbF0s6JSLWl57I9klKS3C/WWkV1kW2/0NpSfCjJJ0XER+1faOk35d0Xa0noso550taHRG/W5SbViz09z5JRxfPRdmhTNsfk/QxSTrssFqL2gIA6lXPhI3SocPSIUNL+l+2l0j6kdLS5nOqnOftKkKkWJRuSclj59herLRI37GSjqlRp7dKujkitkTEK5L+RdLbisd+FRGPFvsPS+quca5a53xc0rts/43tt0XEJqVVU7dL+gfb/0XS1nInjIirI6InInpmzaq2eC4AYDDqCa9bJJ1q+0RJkyLi4eL+DyotZ35SRJygtIT3hMFWwPYRkv5M0qkRsVDSbUM5T4nSpSb2qMGvwIqIn0s6USnELrP9xYjYLelNSsOq75F0ZyPXAAAMTs3wKnoh90j6lvafqDFN0gsRscv2KZIOr3Gq+yR9QJJsHydpYXH/gZK2SNpke47SEGWfzZKmljnX/ZJ+z/Yk25OVhvAaXZW27Dltz1Ma7rxO0pcknWh7iqRpEXG70nLpxzd4bQDAINTbK7lB0s3af+bhdyR93/bjknolPVXjHFdK+kfbT0p6UmlITxHxmO1HiuOflfTjkmOulnSn7dURcUrfnRGx2PY12rca7Tcj4pFiQkm9vtA3KaM45yEVzvluSV+yvVdpBdwLlQL1FtsTlIZPLx7EdQEADWIxyjbp6ekJvlUeAAbH9sMRMeAzwXzDBgAgO4QXACA7hBcAIDuEFwAgO4QXACA7hBcAIDuEFwAgO4QXACA7hBcAIDuEFwAgO4QXACA7hBcAIDuEFwAgO4QXACA7hBcAIDuEFwAgO4QXACA7hBcAIDuEFwAgO4QXACA7hBcAIDuEFwAgO4QXACA7hBcAIDuEFwAgO4QXACA7hBcAIDuEFwAgO4QXACA7hBcAIDuEFwAgO4QXACA7hBcAIDuEFwAgO4QXACA7hBcAIDuEFwAgO4QXACA7hBcAIDuEFwAgO4QXACA7hBcAIDuEFwAgO12drgBquPdeaexYad48ae5cadKkTtcIADqO8BruPvEJafnyfbenTUshNnfuvkDr/3PuXGnKlM7VGQBajPAa7m6+WVq1Slq9WlqzZv+fP/lJ+rljx8Djpk6tHnB9P6dObX+bAKBBhNdwt2BB2iqJkDZu3Bdq/QNuzRpp0aL0c9u2gcdPmVK7JzdvXgo5u3XtBIBBILxyZ0uveU3ajj22crkIadOmygG3erXU25t+bt068PhJk/YflqwUdNOmEXIAWo7wGi1safr0tNXqyW3eXL0n98gj0m23SVu2DDx+4sT6enLTpxNyAIaM8ML+bOnAA9N29NHVy27evH+o9Q+6JUukO+9M5fobP76+ntxrX0vIARiA8MLQTZ2atte/vnq5V17ZF27lenJLl0o/+lEa1uxv3Lj6enIzZhBywChCeKH1pkyRjjoqbdVs3Vq9J/fUU9Ldd6cJKv0dcIB00EG1Z1fOnCmN4bP5QO4ILwwfkyZJr3td2qrZtq16T+4Xv5Duu0968cWBx3Z1pZCr1ZObNYuQA4Yxwgv5mThRmj8/bdVs3y6tXVu5J7dihfTAA9KGDQOPHTtWmjOndk9u9uxUFkBbEV4YuSZMkLq701bNjh0p5Cr15J55RnrwQWnduoHHjhmTQq5WT2727NTrA9AU/DYB48dLhx+etmp27pSef75yT27VKumhh1LIRex/rJ0CrFZPbs6c9P4dgKoIL6Be48ZJhx6atmp27UohV+0D4YsXpzLlQm7WrNo9uYMOIuQwqhFeQLMdcIB0yCFpq2b3bumFFyoH3Jo10qOPppDbu3fg8TNn1u7JHXRQ6lkCIwzhBXRKV1cKmXnzpJNOqlxuz559IVcp6J54Ir1vt2fPwONnzKivJzdhQuvaCjQZ4QUMd2PH7vugdjV79kjr11fvyS1blkJu9+6Bx7/2tfUttzNxYmvaCQwC4QWMFH3T++fMkU44oXK5vXv3hVyloLv33rS/a9fA46dPr2+5HRZORQsRXsBoM2ZMmvk4e7Z0/PGVy+3dmz7oXe1Lmu+/P/3cuXPg8QceWDvgWDgVQ0R4AShvzJg0KWTmTGnhwsrlIlLIVevJsXAqmozwAtAYO00KmTFDOu64yuUaXTh18uTaAcfCqaMG4QWgPdq5cGo9PTkWTs0a4QVgeGn2wqm3356W5elvwoT6enIsnDosEV4A8jSUhVMr9eRqLZxaT0+OhVPbivACMPLVu3Dqli3VPyfHwqnDBuEFAH0mT5aOPDJt1fQtnFop6Fg4teUILwAYrMEsnFq6phwLpzYN4QUArTJxonTEEWmrpm/h1Eo9ORZOHYDwAoBOG8zCqaVryjV74dS+NeUyWDh1+NcQAJCMHy8ddljaqulbOLVST24ELJxKeAHASDNcFk7tW1Nu3LimN5HwAoDRql0Lp27alD6P10SEFwCgukYWTn3++ZZ8qTLhBQBojnoXTm2C0ffhAABA9ggvAEB2CC8AQHYILwBAdggvAEB2mG04zJ17rvTss+kr0vq2CROasz9xYpoBy+oMAHJDeA1z06alb3DZti198fS2bek7PLdt27e/c+fQzz9mTPOCsN5jJkwYlV+CDaCJCK9h7qqrapfZsyeFWGmolQu5oexv2FD5vP2/LWYwxo9vThAOJlQ7+DVsAJqM8BoBxo5Na+hNnty+a0akHl8jAVnpsS1bUmiWK7Nr19DrPHZs+3qXffvjx9PLBFqB8MKQ2Ok/5vHj09Bmu/T1MusNwsHsVwrM7dsb72U2OxRrnYteJkY6wgtZ6WQvs5m9y779LVuk9evLl2m0l9nO9zH7fjL5B+1CeAE1lPYy26m0l9nsnmZpL7P/Y43o62W2sndZbsYsRh9edmCY6nQvs9k9zb5eZrkyzehltnvGLL3MziK8ALyqtJc5fXr7rrt7d+tmzPZ91KTcY43oC7F2zpill7kPTwWAjuvqkqZMSVu7REg7drRmxuzmzftCs3+Z3buHXueurtaEYq0Zs8Oxl0l4ARiV7H29p070MlsxY7ZSYG7f3lidSyflDCUIP/1pady45jx/fQgvAGijTvYyWzFjdvPmtHhyuTJ9vcxPfar5bSK8AGCEK+1ltlNfL7PZvS6J8AIAtEhfL7MV+OIaAEB2CC8AQHYILwBAdggvAEB2CC8AQHYILwBAdggvAEB2CC8AQHYILwBAdggvAEB2CC8AQHYILwBAdggvAEB2CC8AQHYILwBAdggvAEB2CC8AQHYILwBAdggvAEB2CC8AQHYILwBAdggvAEB2CC8AQHYILwBAdggvAEB2CC8AQHYILwBAdggvAEB2CC8AQHYILwBAdggvAEB2CC8AQHYILwBAdggvAEB2CC8AQHYILwBAdggvAEB2CC8AQHYILwBAdggvAEB2CC8AQHYILwBAdggvAEB2CC8AQHYILwBAdggvAEB2CC8AQHYILwBAdggvAEB2CC8AQHYILwBAdggvAEB2CC8AQHYILwBAdggvAEB2CC8AQHYILwBAdggvAEB2CC8AQHYILwBAdggvAEB2CC8AQHYILwBAdggvAEB2CC8AQHYILwBAdggvAEB2CC8AQHYILwBAdggvAEB2CC8AQHYILwBAdggvAEB2CC8AQHYILwBAdggvAEB2CC8AQHYILwBAdggvAEB2CC8AQHYILwBAdggvAEB2CC8AQHYILwBAdggvAEB2CC8AQHYILwBAdggvAEB2CC8AQHYILwBAdggvAEB2CC8AQHYILwBAdhoOL9szbD9abGttP1dye1yd5/hH22+oUea/2f5go/UtzvWA7ROacS4AQPt1NXqCiNgg6QRJsn2ppFci4orSMrYtyRGxt8I5PlzHdb7RaF0BACNDy4YNbR9pe5nt70haKmmu7att99peavuLJWUfsH2C7S7bG21fbvsx2z+1Pbsoc5nti0rKX277IdvLbf9mcf9k2/9cXPem4lp19bBsT7T9T7Yft73Y9tuL+99o+2dFT3KJ7fm2p9q+o6jjE7bPbvbzBwCorNXveR0t6asRcUxEPCfpcxHRI+l4Se+yfUyZY6ZJ+o+IOF7STyX91wrndkS8SdJnJfUF4Z9IWhsRx0j6K0m/Noi6fkrSjoh4o6Q/kHRtMez5x5KuiIgTJP26pNWSzpC0MiKOj4jjJP172QraHysCtHfdunWDqAoAoJpWh9cvI6K35PZ5thdLWixpgaRy4bUtIu4o9h+W1F3h3P9SpsxbJX1XkiLiMaUeX73eKum64tilSiF1pKSfSPqC7f8u6dCI2C5piaTTi97fb0XEpnInjIirI6InInpmzZo1iKoAAKppdXht6duxfZSkT0t6Z0QslHSnpAlljtlZsr9Hld+X21FHmYZFxLWS3ldc707bb4+IJyX1KIXj5bYvadX1AQADtXOq/IGSNkt62fZcSe9uwTV+LOkcKb1XpfI9u0rul/TB4tgFkuZKetr2/Ih4OiL+j6R/k7TQ9sFKE1OulfRlSSc2sQ0AgBpa1mMpY7GkZZKekvSMUtA029clfdv2suJayySVHdKT9APbu4r9+5XeW7vK9uOSdkn6w4jYafsDts8r7lst6VJJv6nU49qr1FP8RAvaAgCowBHR6To0je0uSV0Rsb0YpvyhpKMiYneHq6aenp7o7e2tXRAA8CrbDxcT/fbTzp5XO0yRdFcRYpb08eEQXACA5hpR4RURGyWd1Ol6AABai+82BABkh/ACAGRnRE3YGM5sr1OaZTkUMyWtb2J1ckCbR4fR1ubR1l6p8TYfHhEDvuWB8MqA7d5ys21GMto8Ooy2No+29kqtazPDhgCA7BBeAIDsEF55uLrTFegA2jw6jLY2j7b2Si1qM+95AQCyQ88LAJAdwgsAkB3Caxixfbrt5baftv25Mo+Pt/294vFFtrvbX8vmqaO9F9teZnuJ7btsH96JejZTrTaXlPt922E7+2nV9bTZ9jnFa73U9vXtrmOz1fFv+zDb99h+pPj3fUYn6tkstr9l+wXbT1R43La/VjwfS2w3voxURLANg03SWEm/lDRf0jhJj0k6pl+ZP5b0d8X+uZK+1+l6t7i9p0iaVOxfmHN7621zUW6qpPskPSipp9P1bsPrfJSkRyS9prg9u9P1bkObr5Z0YbF/jKSVna53g21+u9K6hk9UePwMSXcofWH6WyQtavSa9LyGjzdJejoiVkTETknflXRWvzJnSfqnYv8mSafadhvr2Ew12xsR90TE1uLmg5IOaXMdm62e11iS/krS30ja3s7KtUg9bf6opG9ExEuSFBEvtLmOzVZPm0NpgV5Jmqa0VmC2IuI+SS9WKXKWpG9H8qCk6cWixENGeA0fB0t6tuT2quK+smUiLfWySdKMttSu+eppb6mPKP3llrOabS6GUw6NiNvaWbEWqud1fr2k19v+se0HbZ/ettq1Rj1tvlTSh2yvknS7pD9pT9U6ZrC/7zWNqCVRMDLZ/pCkHknv6HRdWsn2GElfkXR+h6vSbl1KQ4cnK/Wu77P9xkhLHI1U50m6JiK+bPs3JF1r+7iI2NvpiuWCntfw8ZykQ0tuH1LcV7ZMseDmNEkb2lK75qunvbJ9mqTPSzozIna0qW6tUqvNUyUdJ+le2yuV3hu4NfNJG/W8zqsk3RoRuyLiV5J+rhRmuaqnzR+RdKMkRcRPJU1Q+gLbkaqu3/fBILyGj59JOsr2EbbHKU3IuLVfmVsl/VGxf7aku6N4NzRDNdtr+9ckXaUUXLm/DyLVaHNEbIqImRHRHRHdSu/znRkRvZ2pblPU8+/6X5V6XbI9U2kYcUU7K9lk9bT5PyWdKkm2FyiF17q21rK9bpX0h8Wsw7dI2hQRaxo5IcOGw0RE7Lb9SUk/UJqt9K2IWGr7LyX1RsStkv5BaXjhaaU3R8/tXI0bU2d7vyRpiqT/V8xL+c+IOLNjlW5QnW0eUeps8w8k/bbtZZL2SPpsROQ6olBvmz8j6e9t/6nS5I3zM/5DVLZvUPoDZGbxPt6fSzpAkiLi75Te1ztD0tOStkr6cMPXzPj5AgCMUgwbAgCyQ3gBALJDeAEAskN4AQCyQ3gBALJDeAEAskN4AQCy8/8BZQ1pZloY3t8AAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# PLOT LOSS AND ACCURACY\n",
    "%matplotlib inline\n",
    "\n",
    "import matplotlib.image  as mpimg\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "#-----------------------------------------------------------\n",
    "# Retrieve a list of list results on training and test data\n",
    "# sets for each training epoch\n",
    "#-----------------------------------------------------------\n",
    "acc=history.history['acc']\n",
    "val_acc=history.history['val_acc']\n",
    "loss=history.history['loss']\n",
    "val_loss=history.history['val_loss']\n",
    "\n",
    "epochs=range(len(acc)) # Get number of epochs\n",
    "\n",
    "#------------------------------------------------\n",
    "# Plot training and validation accuracy per epoch\n",
    "#------------------------------------------------\n",
    "plt.plot(epochs, acc, 'r', \"Training Accuracy\")\n",
    "plt.plot(epochs, val_acc, 'b', \"Validation Accuracy\")\n",
    "plt.title('Training and validation accuracy')\n",
    "plt.figure()\n",
    "\n",
    "#------------------------------------------------\n",
    "# Plot training and validation loss per epoch\n",
    "#------------------------------------------------\n",
    "plt.plot(epochs, loss, 'r', \"Training Loss\")\n",
    "plt.plot(epochs, val_loss, 'b', \"Validation Loss\")\n",
    "\n",
    "\n",
    "plt.title('Training and validation loss')\n",
    "\n",
    "# Desired output. Charts with training and validation metrics. No crash :)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Submission Instructions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Now click the 'Submit Assignment' button above."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# When you're done or would like to take a break, please run the two cells below to save your work and close the Notebook. This will free up resources for your fellow learners. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "<!-- Save the notebook -->\n",
       "IPython.notebook.save_checkpoint();\n"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%%javascript\n",
    "<!-- Save the notebook -->\n",
    "IPython.notebook.save_checkpoint();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%%javascript\n",
    "IPython.notebook.session.delete();\n",
    "window.onbeforeunload = null\n",
    "setTimeout(function() { window.close(); }, 1000);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "accelerator": "GPU",
  "colab": {
   "collapsed_sections": [],
   "name": "Exercise 6 - Question.ipynb",
   "provenance": []
  },
  "coursera": {
   "course_slug": "convolutional-neural-networks-tensorflow",
   "graded_item_id": "uAPOR",
   "launcher_item_id": "e9lTb"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
